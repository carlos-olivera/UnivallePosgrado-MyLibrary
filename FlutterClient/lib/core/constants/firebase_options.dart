// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// **CONFIGURACIÓN FIREBASE EDUCATIVA** 🔥
/// 
/// Este archivo demuestra:
/// - Configuración multi-plataforma de Firebase
/// - Uso de emuladores para desarrollo local
/// - Separación de configuraciones por entorno
/// - Buenas prácticas de seguridad
/// 
/// IMPORTANTE: En un proyecto real, estos valores vendrían del Firebase CLI
/// comando: flutterfire configure

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// **CONFIGURACIÓN WEB** 🌐
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'demo-api-key-web',
    appId: '1:123456789:web:abcdef123456789',
    messagingSenderId: '123456789',
    projectId: 'univalle-mylibrary',
    authDomain: 'univalle-mylibrary.firebaseapp.com',
    storageBucket: 'univalle-mylibrary.appspot.com',
    measurementId: 'G-MEASUREMENT_ID',
  );

  /// **CONFIGURACIÓN ANDROID** 🤖
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'demo-api-key-android',
    appId: '1:123456789:android:abcdef123456789',
    messagingSenderId: '123456789',
    projectId: 'univalle-mylibrary',
    storageBucket: 'univalle-mylibrary.appspot.com',
  );

  /// **CONFIGURACIÓN iOS** 🍎
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'demo-api-key-ios',
    appId: '1:123456789:ios:abcdef123456789',
    messagingSenderId: '123456789',
    projectId: 'univalle-mylibrary',
    storageBucket: 'univalle-mylibrary.appspot.com',
    iosBundleId: 'com.univalle.mylibrary',
  );

  /// **CONFIGURACIÓN macOS** 💻
  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'demo-api-key-macos',
    appId: '1:123456789:macos:abcdef123456789',
    messagingSenderId: '123456789',
    projectId: 'univalle-mylibrary',
    storageBucket: 'univalle-mylibrary.appspot.com',
    iosBundleId: 'com.univalle.mylibrary',
  );
}

/// **CONFIGURACIONES DE EMULADOR** 🛠️
/// 
/// Configuraciones específicas para desarrollo local con emuladores Firebase.
/// Estas configuraciones apuntan a los emuladores locales en lugar de Firebase.
class EmulatorConfig {
  // **HOST DEL EMULADOR** 🏠
  static String get emulatorHost {
    if (kIsWeb) {
      return 'localhost';
    }
    
    // Para Android Emulator, usar la IP especial
    if (defaultTargetPlatform == TargetPlatform.android) {
      return '192.168.50.161'; // IP de la máquina de desarrollo
    }
    
    // Para iOS Simulator y otros, usar localhost
    return 'localhost';
  }
  
  // **PUERTOS DE EMULADORES** 🔌
  static const int authEmulatorPort = 9099;
  static const int firestoreEmulatorPort = 8080;
  static const int storageEmulatorPort = 9199;
  static const int functionsEmulatorPort = 5001;
  static const int databaseEmulatorPort = 9000;
  
  // **URLs COMPLETAS** 🔗
  static String get authEmulatorUrl => 'http://$emulatorHost:$authEmulatorPort';
  static String get firestoreEmulatorUrl => 'http://$emulatorHost:$firestoreEmulatorPort';
  static String get storageEmulatorUrl => 'http://$emulatorHost:$storageEmulatorPort';
}

/// **CONFIGURACIONES POR ENTORNO** 🏗️
/// 
/// Permite alternar entre diferentes configuraciones según el entorno.
enum Environment {
  development,
  staging,
  production,
}

class EnvironmentConfig {
  static const Environment currentEnvironment = Environment.development;
  
  /// **DETERMINAR SI USAR EMULADORES** 🔧
  static bool get useEmulators {
    return currentEnvironment == Environment.development;
  }
  
  /// **OBTENER CONFIGURACIÓN SEGÚN ENTORNO** ⚙️
  static FirebaseOptions getFirebaseOptions() {
    switch (currentEnvironment) {
      case Environment.development:
        // En desarrollo, usar configuración con emuladores
        return _getEmulatorOptions();
      case Environment.staging:
        // En staging, usar proyecto de staging
        return _getStagingOptions();
      case Environment.production:
        // En producción, usar configuración real
        return DefaultFirebaseOptions.currentPlatform;
    }
  }
  
  /// **CONFIGURACIÓN PARA EMULADORES** 🔧
  static FirebaseOptions _getEmulatorOptions() {
    // Configuración especial para emuladores
    return DefaultFirebaseOptions.currentPlatform;
  }
  
  /// **CONFIGURACIÓN PARA STAGING** 🏗️
  static FirebaseOptions _getStagingOptions() {
    // Configuración para entorno de staging
    return DefaultFirebaseOptions.currentPlatform;
  }
}